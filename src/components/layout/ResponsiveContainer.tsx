import React from 'react';
import { useMediaQuery } from '@/hooks/use-media-query';
interface ResponsiveContainerProps {
  children: React.ReactNode;
  className?: string;
  fullWidth?: boolean;
}
export const ResponsiveContainer: React.FC<ResponsiveContainerProps> = ({
  children,
  className = "",
  fullWidth = false
}) => {
  const {
    isMobile
  } = useMediaQuery("(max-width: 640px)");
  return <div className="Copy-paste this component to /components/ui folder:\n```tsx\ncomponent.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { motion, AnimatePresence, useMotionValue } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport const FollowerPointerCard = ({\n  children,\n  className,\n  title,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  title?: string | React.ReactNode;\n}) => {\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const [rect, setRect] = useState<DOMRect | null>(null);\n  const [isInside, setIsInside] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (ref.current) {\n      setRect(ref.current.getBoundingClientRect());\n    }\n  }, []);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (rect) {\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      x.set(e.clientX - rect.left + scrollX);\n      y.set(e.clientY - rect.top + scrollY);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setIsInside(false);\n  };\n\n  const handleMouseEnter = () => {\n    setIsInside(true);\n  };\n\n  return (\n    <div\n      onMouseLeave={handleMouseLeave}\n      onMouseEnter={handleMouseEnter}\n      onMouseMove={handleMouseMove}\n      style={{\n        cursor: \"none\",\n      }}\n      ref={ref}\n      className={cn(\"relative\", className)}\n    >\n      <AnimatePresence>\n        {isInside && <FollowPointer x={x} y={y} title={title} />}\n      </AnimatePresence>\n      {children}\n    </div>\n  );\n};\n\nexport const FollowPointer = ({\n  x,\n  y,\n  title,\n}: {\n  x: any;\n  y: any;\n  title?: string | React.ReactNode;\n}) => {\n  // Using RGB values instead of CSS variables\n  const colors = [\n    \"rgb(14 165 233)\", // sky-500\n    \"rgb(115 115 115)\", // neutral-500\n    \"rgb(20 184 166)\", // teal-500\n    \"rgb(34 197 94)\", // green-500\n    \"rgb(59 130 246)\", // blue-500\n    \"rgb(239 68 68)\", // red-500\n    \"rgb(234 179 8)\", // yellow-500\n  ];\n\n  return (\n    <motion.div\n      className=\"h-4 w-4 rounded-full absolute z-50\"\n      style={{\n        top: y,\n        left: x,\n        pointerEvents: \"none\",\n      }}\n      initial={{\n        scale: 1,\n        opacity: 1,\n      }}\n      animate={{\n        scale: 1,\n        opacity: 1,\n      }}\n      exit={{\n        scale: 0,\n        opacity: 0,\n      }}\n    >\n      <svg\n        stroke=\"currentColor\"\n        fill=\"currentColor\"\n        strokeWidth=\"1\"\n        viewBox=\"0 0 16 16\"\n        className=\"h-6 w-6 text-sky-500 transform -rotate-[70deg] -translate-x-[12px] -translate-y-[10px] stroke-sky-600\"\n        height=\"1em\"\n        width=\"1em\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"></path>\n      </svg>\n      <motion.div\n        style={{\n          backgroundColor: colors[Math.floor(Math.random() * colors.length)],\n        }}\n        initial={{\n          scale: 0.5,\n          opacity: 0,\n        }}\n        animate={{\n          scale: 1,\n          opacity: 1,\n        }}\n        exit={{\n          scale: 0.5,\n          opacity: 0,\n        }}\n        className=\"px-2 py-2 text-white whitespace-nowrap min-w-max text-xs rounded-full\"\n      >\n        {title || `William Shakespeare`}\n      </motion.div>\n    </motion.div>\n  );\n};\n\ndemo.tsx\nimport Image from \"next/image\";\nimport { FollowerPointerCard } from \"@/components/ui/following-pointer\";\n\nexport function FollowingPointerDemo() {\n  return (\n    <div className=\"w-80 mx-auto\">\n      <FollowerPointerCard\n        title={\n          <TitleComponent\n            title={blogContent.author}\n            avatar={blogContent.authorAvatar}\n          />\n        }\n      >\n        <div className=\"relative overflow-hidden h-full rounded-2xl transition duration-200 group bg-white hover:shadow-xl border border-zinc-100\">\n          <div className=\"w-full aspect-w-16 aspect-h-10 bg-gray-100 rounded-tr-lg rounded-tl-lg overflow-hidden xl:aspect-w-16 xl:aspect-h-10 relative\">\n            <Image\n              src={'https://ui.aceternity.com/_next/image?url=%2Fdemo%2Fthumbnail.png&w=3840&q=75'}\n              alt=\"thumbnail\"\n              layout=\"fill\"\n              objectFit=\"cover\"\n              className={`group-hover:scale-95 group-hover:rounded-2xl transform object-cover transition duration-200 `}\n            />\n          </div>\n          <div className=\" p-4\">\n            <h2 className=\"font-bold my-4 text-lg text-zinc-700\">\n              {blogContent.title}\n            </h2>\n            <h2 className=\"font-normal my-4 text-sm text-zinc-500\">\n              {blogContent.description}\n            </h2>\n            <div className=\"flex flex-row justify-between items-center mt-10\">\n              <span className=\"text-sm text-gray-500\">{blogContent.date}</span>\n              <div className=\"relative z-10 px-6 py-2 bg-black text-white font-bold rounded-xl block text-xs\">\n                Read More\n              </div>\n            </div>\n          </div>\n        </div>\n      </FollowerPointerCard>\n    </div>\n  );\n}\n\nconst blogContent = {\n  slug: \"amazing-tailwindcss-grid-layouts\",\n  author: \"Manu Arora\",\n  date: \"28th March, 2023\",\n  title: \"Amazing Tailwindcss Grid Layout Examples\",\n  description:\n    \"Grids are cool, but Tailwindcss grids are cooler. In this article, we will learn how to create amazing Grid layouts with Tailwindcs grid and React.\",\n  image: \"/demo/thumbnail.png\",\n  authorAvatar: \"/manu.png\",\n};\n\nconst TitleComponent = ({\n  title,\n  avatar,\n}: {\n  title: string;\n  avatar: string;\n}) => (\n  <div className=\"flex space-x-2 items-center\">\n    <Image\n      src={avatar}\n      height=\"20\"\n      width=\"20\"\n      alt=\"thumbnail\"\n      className=\"rounded-full border-2 border-white\"\n    />\n    <p>{title}</p>\n  </div>\n);\n\n```\n\n\nAdditional important context to consider: afficher les videos avec #mrc #kamto #cameroun\nRemember: Do not change the component's code unless it's required to integrate or the user asks you to.\nIMPORTANT: Create all mentioned files in full, without abbreviations. Do not use placeholders like \"insert the rest of the code here\" \u2013 output every line of code exactly as it is, so it can be copied and pasted directly into the project.">
      {children}
    </div>;
};
export default ResponsiveContainer;